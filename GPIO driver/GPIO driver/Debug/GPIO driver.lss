
GPIO driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a4  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dc  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a9  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000301  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001b19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  64:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <gpio_set_port_direction>:
#include "GPIO.h"
#include "memory_map.h"
#include "utilities.h"
void gpio_set_port_direction(unsigned char portnumber ,unsigned char direction)
{
	switch(portnumber)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	69 f0       	breq	.+26     	; 0x8a <gpio_set_port_direction+0x1e>
  70:	28 f0       	brcs	.+10     	; 0x7c <gpio_set_port_direction+0x10>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	89 f0       	breq	.+34     	; 0x98 <gpio_set_port_direction+0x2c>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	b1 f0       	breq	.+44     	; 0xa6 <gpio_set_port_direction+0x3a>
  7a:	08 95       	ret
	{
		case PORT_A :
		if (direction ==direction_input)
  7c:	61 11       	cpse	r22, r1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <gpio_set_port_direction+0x18>
		{
			DDRA = 0x00;
  80:	1a ba       	out	0x1a, r1	; 26
  82:	08 95       	ret
		}
		else
		{
			DDRA =0xff;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a bb       	out	0x1a, r24	; 26
  88:	08 95       	ret
		}
		break;
		
		case PORT_B :
		if (direction ==direction_input)
  8a:	61 11       	cpse	r22, r1
  8c:	02 c0       	rjmp	.+4      	; 0x92 <gpio_set_port_direction+0x26>
		{
			DDRB = 0x00;
  8e:	17 ba       	out	0x17, r1	; 23
  90:	08 95       	ret
		}
		else
		{
			DDRB =0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
  96:	08 95       	ret
		}
		break;
		
		case PORT_C :
		if (direction ==direction_input)
  98:	61 11       	cpse	r22, r1
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <gpio_set_port_direction+0x34>
		{
			DDRC = 0x00;
  9c:	14 ba       	out	0x14, r1	; 20
  9e:	08 95       	ret
		}
		else
		{
			DDRC =0xff;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	84 bb       	out	0x14, r24	; 20
  a4:	08 95       	ret
		}
		break;
		
		case PORT_D :
		if (direction ==direction_input)
  a6:	61 11       	cpse	r22, r1
  a8:	02 c0       	rjmp	.+4      	; 0xae <gpio_set_port_direction+0x42>
		{
			DDRD = 0x00;
  aa:	11 ba       	out	0x11, r1	; 17
  ac:	08 95       	ret
		}
		else
		{
			DDRD =0xff;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	81 bb       	out	0x11, r24	; 17
  b2:	08 95       	ret

000000b4 <gpio_set_pin_direction>:
	}
}

void gpio_set_pin_direction(unsigned char portnumber ,unsigned char pin ,unsigned char direction)
{
	switch(portnumber)
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	01 f1       	breq	.+64     	; 0xf8 <gpio_set_pin_direction+0x44>
  b8:	30 f0       	brcs	.+12     	; 0xc6 <gpio_set_pin_direction+0x12>
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	b1 f1       	breq	.+108    	; 0x12a <gpio_set_pin_direction+0x76>
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	09 f4       	brne	.+2      	; 0xc4 <gpio_set_pin_direction+0x10>
  c2:	4c c0       	rjmp	.+152    	; 0x15c <gpio_set_pin_direction+0xa8>
  c4:	08 95       	ret
	{
		case PORT_A :
		if (direction ==direction_input)
  c6:	41 11       	cpse	r20, r1
  c8:	0c c0       	rjmp	.+24     	; 0xe2 <gpio_set_pin_direction+0x2e>
		{
			clearbit(DDRA ,pin);
  ca:	2a b3       	in	r18, 0x1a	; 26
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <gpio_set_pin_direction+0x22>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <gpio_set_pin_direction+0x1e>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	8a bb       	out	0x1a, r24	; 26
  e0:	08 95       	ret
		}
		else
		{
			setbit(DDRA ,pin);
  e2:	2a b3       	in	r18, 0x1a	; 26
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <gpio_set_pin_direction+0x3a>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <gpio_set_pin_direction+0x36>
  f2:	82 2b       	or	r24, r18
  f4:	8a bb       	out	0x1a, r24	; 26
  f6:	08 95       	ret
		}
		break;
		
		case PORT_B :
		if (direction ==direction_input)
  f8:	41 11       	cpse	r20, r1
  fa:	0c c0       	rjmp	.+24     	; 0x114 <gpio_set_pin_direction+0x60>
		{
			clearbit(DDRB ,pin);
  fc:	27 b3       	in	r18, 0x17	; 23
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <gpio_set_pin_direction+0x54>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <gpio_set_pin_direction+0x50>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	87 bb       	out	0x17, r24	; 23
 112:	08 95       	ret
		}
		else
		{
			setbit(DDRB ,pin);
 114:	27 b3       	in	r18, 0x17	; 23
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <gpio_set_pin_direction+0x6c>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <gpio_set_pin_direction+0x68>
 124:	82 2b       	or	r24, r18
 126:	87 bb       	out	0x17, r24	; 23
 128:	08 95       	ret
		}
		break;
		
		case PORT_C :
		if (direction ==direction_input)
 12a:	41 11       	cpse	r20, r1
 12c:	0c c0       	rjmp	.+24     	; 0x146 <gpio_set_pin_direction+0x92>
		{
			clearbit(DDRC ,pin);
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <gpio_set_pin_direction+0x86>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <gpio_set_pin_direction+0x82>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
		}
		else
		{
			setbit(DDRC ,pin);
 146:	24 b3       	in	r18, 0x14	; 20
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <gpio_set_pin_direction+0x9e>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <gpio_set_pin_direction+0x9a>
 156:	82 2b       	or	r24, r18
 158:	84 bb       	out	0x14, r24	; 20
 15a:	08 95       	ret
		}
		break;
		
		case PORT_D :
		if (direction ==direction_input)
 15c:	41 11       	cpse	r20, r1
 15e:	0c c0       	rjmp	.+24     	; 0x178 <gpio_set_pin_direction+0xc4>
		{
			clearbit(DDRD ,pin);
 160:	21 b3       	in	r18, 0x11	; 17
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <gpio_set_pin_direction+0xb8>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <gpio_set_pin_direction+0xb4>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	81 bb       	out	0x11, r24	; 17
 176:	08 95       	ret
		}
		else
		{
			setbit(DDRD ,pin);
 178:	21 b3       	in	r18, 0x11	; 17
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <gpio_set_pin_direction+0xd0>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <gpio_set_pin_direction+0xcc>
 188:	82 2b       	or	r24, r18
 18a:	81 bb       	out	0x11, r24	; 17
 18c:	08 95       	ret

0000018e <main>:


int main(void)
{
	
	 gpio_set_port_direction(PORT_A ,1);
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 36 00 	call	0x6c	; 0x6c <gpio_set_port_direction>
	 gpio_set_pin_direction(PORT_B ,0 ,1);
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 5a 00 	call	0xb4	; 0xb4 <gpio_set_pin_direction>
	// gpio_set_pin_value(PORT_A ,0 ,1);
	 //gpio_set_port_value(PORT_A ,0xff);
	 gpio_set_port_direction(PORT_C ,direction_input);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 36 00 	call	0x6c	; 0x6c <gpio_set_port_direction>
	
	 
	
   // gpio_set_pin_direction(PORT_A , pin0,direction_output);
   // gpio_set_pin_value(PORT_A , pin0 , 1);
   PORTA=0x00;
 1a8:	1b ba       	out	0x1b, r1	; 27
  
   
    while (1) 
    {
		// pull up res
		if (readbit(PINC,0)==0)
 1aa:	98 99       	sbic	0x13, 0	; 19
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <main+0x28>
		{
				setbit(PORTA,0);
 1ae:	8b b3       	in	r24, 0x1b	; 27
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	8b bb       	out	0x1b, r24	; 27
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <main+0x2e>

		}
		else
		{
			clearbit(PORTA,0);
 1b6:	8b b3       	in	r24, 0x1b	; 27
 1b8:	8e 7f       	andi	r24, 0xFE	; 254
 1ba:	8b bb       	out	0x1b, r24	; 27
		}
		if (readbit(PINC,7)==1)
 1bc:	9f 9b       	sbis	0x13, 7	; 19
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <main+0x3a>
		{
			setbit(PORTA,7);
 1c0:	8b b3       	in	r24, 0x1b	; 27
 1c2:	80 68       	ori	r24, 0x80	; 128
 1c4:	8b bb       	out	0x1b, r24	; 27
 1c6:	f1 cf       	rjmp	.-30     	; 0x1aa <main+0x1c>
		}
		else
		{
			clearbit(PORTA,7);
 1c8:	8b b3       	in	r24, 0x1b	; 27
 1ca:	8f 77       	andi	r24, 0x7F	; 127
 1cc:	8b bb       	out	0x1b, r24	; 27
 1ce:	ed cf       	rjmp	.-38     	; 0x1aa <main+0x1c>

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
