
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000712  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ec  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002dc  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000372  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001e  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	U8 Data;
	direction_and_port_init();
  6c:	0e 94 4b 00 	call	0x96	; 0x96 <direction_and_port_init>
	USART_VoidInit();
  70:	0e 94 56 00 	call	0xac	; 0xac <USART_VoidInit>
    /* Replace with your application code */
    while (1) 
    {
		Data = USART_U8Receive();
  74:	0e 94 65 00 	call	0xca	; 0xca <USART_U8Receive>
		//_delay_ms(100);
		
		if(Data =='1')
  78:	81 33       	cpi	r24, 0x31	; 49
  7a:	21 f4       	brne	.+8      	; 0x84 <main+0x18>
		{
			setbit(PORTA , 0);
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	8b bb       	out	0x1b, r24	; 27
  82:	05 c0       	rjmp	.+10     	; 0x8e <main+0x22>
			//gpio_set_pin_value(PORT_A , 0 , 1);
		}
		else if (Data =='2')
  84:	82 33       	cpi	r24, 0x32	; 50
  86:	19 f4       	brne	.+6      	; 0x8e <main+0x22>
		{
			clearbit(PORTA , 0); 
  88:	8b b3       	in	r24, 0x1b	; 27
  8a:	8e 7f       	andi	r24, 0xFE	; 254
  8c:	8b bb       	out	0x1b, r24	; 27
			//gpio_set_pin_value(PORT_A , 0 , 0);
		}
		USART_VoidSend('D');
  8e:	84 e4       	ldi	r24, 0x44	; 68
  90:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_VoidSend>
		
		
		
		
		
    }
  94:	ef cf       	rjmp	.-34     	; 0x74 <main+0x8>

00000096 <direction_and_port_init>:
#include "port_config.h"
#include "port_initial.h"

void direction_and_port_init(void)
{
	DDRA = DDRA_DIRECTION;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a bb       	out	0x1a, r24	; 26
	DDRB = DDRB_DIRECTION;
  9a:	87 bb       	out	0x17, r24	; 23
	DDRC = DDRC_DIRECTION;
  9c:	84 bb       	out	0x14, r24	; 20
	DDRD = DDRD_DIRECTION;
  9e:	8e eb       	ldi	r24, 0xBE	; 190
  a0:	81 bb       	out	0x11, r24	; 17
	
	PORTA = PORTA_VALUE;
  a2:	1b ba       	out	0x1b, r1	; 27
	PORTB = PORTB_VALUE;
  a4:	18 ba       	out	0x18, r1	; 24
	PORTC = PORTC_VALUE;  
  a6:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_VALUE;
  a8:	12 ba       	out	0x12, r1	; 18
  aa:	08 95       	ret

000000ac <USART_VoidInit>:
	U8 Local_u8UCSRCValue=0;
	setbit(Local_u8UCSRCValue , 7);  // to write on reg UCSRC 
	setbit(Local_u8UCSRCValue , UCSRC_UCSZ0);  //to choose data 8 bit mode
	setbit(Local_u8UCSRCValue , UCSRC_UCSZ1);  //to choose data 8 bit mode
	
	UCSRC = Local_u8UCSRCValue;
  ac:	86 e8       	ldi	r24, 0x86	; 134
  ae:	80 bd       	out	0x20, r24	; 32
	
	UBRRL = 51;   //to choose baudrate 9600bit/sec when the clock 8mhz
  b0:	83 e3       	ldi	r24, 0x33	; 51
  b2:	89 b9       	out	0x09, r24	; 9
	 
	setbit(UCSRB , UCSRB_TXEN);   //transmit enable
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	8a b9       	out	0x0a, r24	; 10
	setbit(UCSRB , UCSRB_RXEN);   //receive enable
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	8a b9       	out	0x0a, r24	; 10
  c0:	08 95       	ret

000000c2 <USART_VoidSend>:
	
	
}
void USART_VoidSend(U8 Copy_data)
{
	while(readbit(UCSRA , UCSRA_UDRE) == 0);  //wait until the transmit data is empty
  c2:	5d 9b       	sbis	0x0b, 5	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <USART_VoidSend>
	UDR = Copy_data;     //you must write on UDR to choose transmit data
  c6:	8c b9       	out	0x0c, r24	; 12
  c8:	08 95       	ret

000000ca <USART_U8Receive>:
	
}

U8 USART_U8Receive(void)
{
	while(readbit(UCSRA , UCSRA_RXC)==0);   // wait until the receive is complete
  ca:	5f 9b       	sbis	0x0b, 7	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <USART_U8Receive>
	return UDR;             //you must read the UDR to choose receive data
  ce:	8c b1       	in	r24, 0x0c	; 12
  d0:	08 95       	ret

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
