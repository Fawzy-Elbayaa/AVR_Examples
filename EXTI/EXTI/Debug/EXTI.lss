
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000049e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000049e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d44  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000746  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000860  00000000  00000000  00001ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00002348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000585  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000095e  00000000  00000000  00002bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003517  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_1>
   8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_2>
   c:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <main>
  74:	0c 94 13 02 	jmp	0x426	; 0x426 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <EXTI_INT0_INIT_SENSE>:
		default: current_state = NOTOK;
	}
	return current_state;
	
	
}
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	89 f0       	breq	.+34     	; 0xa2 <EXTI_INT0_INIT_SENSE+0x26>
  80:	18 f4       	brcc	.+6      	; 0x88 <EXTI_INT0_INIT_SENSE+0xc>
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	31 f0       	breq	.+12     	; 0x92 <EXTI_INT0_INIT_SENSE+0x16>
  86:	25 c0       	rjmp	.+74     	; 0xd2 <EXTI_INT0_INIT_SENSE+0x56>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	99 f0       	breq	.+38     	; 0xb2 <EXTI_INT0_INIT_SENSE+0x36>
  8c:	84 30       	cpi	r24, 0x04	; 4
  8e:	c9 f0       	breq	.+50     	; 0xc2 <EXTI_INT0_INIT_SENSE+0x46>
  90:	20 c0       	rjmp	.+64     	; 0xd2 <EXTI_INT0_INIT_SENSE+0x56>
  92:	85 b7       	in	r24, 0x35	; 53
  94:	8e 7f       	andi	r24, 0xFE	; 254
  96:	85 bf       	out	0x35, r24	; 53
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	85 bf       	out	0x35, r24	; 53
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	08 95       	ret
  a2:	85 b7       	in	r24, 0x35	; 53
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	85 bf       	out	0x35, r24	; 53
  a8:	85 b7       	in	r24, 0x35	; 53
  aa:	8d 7f       	andi	r24, 0xFD	; 253
  ac:	85 bf       	out	0x35, r24	; 53
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	08 95       	ret
  b2:	85 b7       	in	r24, 0x35	; 53
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	85 bf       	out	0x35, r24	; 53
  b8:	85 b7       	in	r24, 0x35	; 53
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	85 bf       	out	0x35, r24	; 53
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	08 95       	ret
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	85 bf       	out	0x35, r24	; 53
  c8:	85 b7       	in	r24, 0x35	; 53
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	85 bf       	out	0x35, r24	; 53
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	08 95       	ret
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	08 95       	ret

000000d6 <EXTI_INT1_INIT_SENSE>:
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	89 f0       	breq	.+34     	; 0xfc <EXTI_INT1_INIT_SENSE+0x26>
  da:	18 f4       	brcc	.+6      	; 0xe2 <EXTI_INT1_INIT_SENSE+0xc>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	31 f0       	breq	.+12     	; 0xec <EXTI_INT1_INIT_SENSE+0x16>
  e0:	25 c0       	rjmp	.+74     	; 0x12c <EXTI_INT1_INIT_SENSE+0x56>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	99 f0       	breq	.+38     	; 0x10c <EXTI_INT1_INIT_SENSE+0x36>
  e6:	84 30       	cpi	r24, 0x04	; 4
  e8:	c9 f0       	breq	.+50     	; 0x11c <EXTI_INT1_INIT_SENSE+0x46>
  ea:	20 c0       	rjmp	.+64     	; 0x12c <EXTI_INT1_INIT_SENSE+0x56>
  ec:	85 b7       	in	r24, 0x35	; 53
  ee:	8b 7f       	andi	r24, 0xFB	; 251
  f0:	85 bf       	out	0x35, r24	; 53
  f2:	85 b7       	in	r24, 0x35	; 53
  f4:	87 7f       	andi	r24, 0xF7	; 247
  f6:	85 bf       	out	0x35, r24	; 53
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	08 95       	ret
  fc:	85 b7       	in	r24, 0x35	; 53
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	85 bf       	out	0x35, r24	; 53
 102:	85 b7       	in	r24, 0x35	; 53
 104:	87 7f       	andi	r24, 0xF7	; 247
 106:	85 bf       	out	0x35, r24	; 53
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
 10c:	85 b7       	in	r24, 0x35	; 53
 10e:	8b 7f       	andi	r24, 0xFB	; 251
 110:	85 bf       	out	0x35, r24	; 53
 112:	85 b7       	in	r24, 0x35	; 53
 114:	88 60       	ori	r24, 0x08	; 8
 116:	85 bf       	out	0x35, r24	; 53
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
 11c:	85 b7       	in	r24, 0x35	; 53
 11e:	84 60       	ori	r24, 0x04	; 4
 120:	85 bf       	out	0x35, r24	; 53
 122:	85 b7       	in	r24, 0x35	; 53
 124:	88 60       	ori	r24, 0x08	; 8
 126:	85 bf       	out	0x35, r24	; 53
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	08 95       	ret

00000130 <EXTI_INT2_INIT_SENSE>:
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	19 f0       	breq	.+6      	; 0x13a <EXTI_INT2_INIT_SENSE+0xa>
 134:	84 30       	cpi	r24, 0x04	; 4
 136:	31 f0       	breq	.+12     	; 0x144 <EXTI_INT2_INIT_SENSE+0x14>
 138:	0a c0       	rjmp	.+20     	; 0x14e <EXTI_INT2_INIT_SENSE+0x1e>
 13a:	84 b7       	in	r24, 0x34	; 52
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	84 bf       	out	0x34, r24	; 52
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret
 144:	84 b7       	in	r24, 0x34	; 52
 146:	80 64       	ori	r24, 0x40	; 64
 148:	84 bf       	out	0x34, r24	; 52
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	08 95       	ret

00000152 <EXTI_INT_ENABLE>:
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	49 f0       	breq	.+18     	; 0x168 <EXTI_INT_ENABLE+0x16>
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	61 f0       	breq	.+24     	; 0x172 <EXTI_INT_ENABLE+0x20>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	79 f4       	brne	.+30     	; 0x17c <EXTI_INT_ENABLE+0x2a>
 15e:	8b b7       	in	r24, 0x3b	; 59
 160:	80 64       	ori	r24, 0x40	; 64
 162:	8b bf       	out	0x3b, r24	; 59
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	08 95       	ret
 168:	8b b7       	in	r24, 0x3b	; 59
 16a:	80 68       	ori	r24, 0x80	; 128
 16c:	8b bf       	out	0x3b, r24	; 59
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret
 172:	8b b7       	in	r24, 0x3b	; 59
 174:	80 62       	ori	r24, 0x20	; 32
 176:	8b bf       	out	0x3b, r24	; 59
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	08 95       	ret

00000180 <EXTI_U8INT0SETCALLBACK>:

U8 EXTI_U8INT0SETCALLBACK(void (*copy_pvInt0func)(void))
{
	U8 Local_u8ErrorStatus= OK;
	if (copy_pvInt0func !=NULL)
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	31 f0       	breq	.+12     	; 0x190 <EXTI_U8INT0SETCALLBACK+0x10>
	{
		EXTI_PVInt0ptrfunc = copy_pvInt0func;
 184:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <EXTI_PVInt0ptrfunc+0x1>
 188:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <EXTI_PVInt0ptrfunc>
	
}

U8 EXTI_U8INT0SETCALLBACK(void (*copy_pvInt0func)(void))
{
	U8 Local_u8ErrorStatus= OK;
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
	{
		EXTI_PVInt0ptrfunc = copy_pvInt0func;
	}
	else 
	{
		Local_u8ErrorStatus = NOTOK ;
 190:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8ErrorStatus;
	
}
 192:	08 95       	ret

00000194 <EXTI_U8INT1SETCALLBACK>:

U8 EXTI_U8INT1SETCALLBACK(void (*copy_pvInt0func)(void))
{
	U8 Local_u8ErrorStatus= OK;
	if (copy_pvInt0func !=NULL)
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	31 f0       	breq	.+12     	; 0x1a4 <EXTI_U8INT1SETCALLBACK+0x10>
	{
		EXTI_PVInt1ptrfunc = copy_pvInt0func;
 198:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <EXTI_PVInt1ptrfunc+0x1>
 19c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <EXTI_PVInt1ptrfunc>
	
}

U8 EXTI_U8INT1SETCALLBACK(void (*copy_pvInt0func)(void))
{
	U8 Local_u8ErrorStatus= OK;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	08 95       	ret
	{
		EXTI_PVInt1ptrfunc = copy_pvInt0func;
	}
	else
	{
		Local_u8ErrorStatus = NOTOK ;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8ErrorStatus;
	
}
 1a6:	08 95       	ret

000001a8 <EXTI_U8INT2SETCALLBACK>:
U8 EXTI_U8INT2SETCALLBACK(void (*copy_pvInt0func)(void))
{
	U8 Local_u8ErrorStatus= OK;
	if (copy_pvInt0func !=NULL)
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	31 f0       	breq	.+12     	; 0x1b8 <EXTI_U8INT2SETCALLBACK+0x10>
	{
		EXTI_PVInt2ptrfunc = copy_pvInt0func;
 1ac:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return Local_u8ErrorStatus;
	
}
U8 EXTI_U8INT2SETCALLBACK(void (*copy_pvInt0func)(void))
{
	U8 Local_u8ErrorStatus= OK;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	08 95       	ret
	{
		EXTI_PVInt2ptrfunc = copy_pvInt0func;
	}
	else
	{
		Local_u8ErrorStatus = NOTOK ;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8ErrorStatus;
	
}
 1ba:	08 95       	ret

000001bc <__vector_1>:
/*global pointer to function to hold INT1 ISR address*/

/* ISR FOR INT0*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	if (EXTI_PVInt0ptrfunc !=NULL)
 1de:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTI_PVInt0ptrfunc>
 1e2:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTI_PVInt0ptrfunc+0x1>
 1e6:	30 97       	sbiw	r30, 0x00	; 0
 1e8:	09 f0       	breq	.+2      	; 0x1ec <__vector_1+0x30>
	{
		EXTI_PVInt0ptrfunc();
 1ea:	09 95       	icall
	}
	
}
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_2>:

/* ISR FOR INT1*/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	2f 93       	push	r18
 21a:	3f 93       	push	r19
 21c:	4f 93       	push	r20
 21e:	5f 93       	push	r21
 220:	6f 93       	push	r22
 222:	7f 93       	push	r23
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	if (EXTI_PVInt0ptrfunc !=NULL)
 230:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <EXTI_PVInt0ptrfunc>
 234:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <EXTI_PVInt0ptrfunc+0x1>
 238:	89 2b       	or	r24, r25
 23a:	29 f0       	breq	.+10     	; 0x246 <__vector_2+0x38>
	{
		EXTI_PVInt1ptrfunc();
 23c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <EXTI_PVInt1ptrfunc>
 240:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <EXTI_PVInt1ptrfunc+0x1>
 244:	09 95       	icall
	}
	
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	7f 91       	pop	r23
 254:	6f 91       	pop	r22
 256:	5f 91       	pop	r21
 258:	4f 91       	pop	r20
 25a:	3f 91       	pop	r19
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <__vector_3>:

/* ISR FOR INT2*/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	5f 93       	push	r21
 27a:	6f 93       	push	r22
 27c:	7f 93       	push	r23
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	af 93       	push	r26
 284:	bf 93       	push	r27
 286:	ef 93       	push	r30
 288:	ff 93       	push	r31
	if (EXTI_PVInt0ptrfunc !=NULL)
 28a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <EXTI_PVInt0ptrfunc>
 28e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <EXTI_PVInt0ptrfunc+0x1>
 292:	89 2b       	or	r24, r25
 294:	29 f0       	breq	.+10     	; 0x2a0 <__vector_3+0x38>
	{
		EXTI_PVInt2ptrfunc();
 296:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 29a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 29e:	09 95       	icall
	}
	
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <GIE_ENABLE>:
#include "GIE_INTERFACE.h"


void GIE_ENABLE(void)
{
	setbit(SREG,SREG_I);
 2c2:	8f b7       	in	r24, 0x3f	; 63
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	8f bf       	out	0x3f, r24	; 63
 2c8:	08 95       	ret

000002ca <gpio_set_pin_value>:
	}
}

void gpio_set_pin_value(unsigned char portnumber ,unsigned char pin ,unsigned char value)
{
	switch(portnumber)
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	01 f1       	breq	.+64     	; 0x30e <gpio_set_pin_value+0x44>
 2ce:	30 f0       	brcs	.+12     	; 0x2dc <gpio_set_pin_value+0x12>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	b1 f1       	breq	.+108    	; 0x340 <gpio_set_pin_value+0x76>
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	09 f4       	brne	.+2      	; 0x2da <gpio_set_pin_value+0x10>
 2d8:	4c c0       	rjmp	.+152    	; 0x372 <gpio_set_pin_value+0xa8>
 2da:	08 95       	ret
	{
		case PORT_A :
		if (value ==1)
 2dc:	41 30       	cpi	r20, 0x01	; 1
 2de:	59 f4       	brne	.+22     	; 0x2f6 <gpio_set_pin_value+0x2c>
		{
			setbit(PORTA ,pin);
 2e0:	2b b3       	in	r18, 0x1b	; 27
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <gpio_set_pin_value+0x22>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <gpio_set_pin_value+0x1e>
 2f0:	82 2b       	or	r24, r18
 2f2:	8b bb       	out	0x1b, r24	; 27
 2f4:	08 95       	ret
		}
		else
		{
			clearbit(PORTA,pin);
 2f6:	2b b3       	in	r18, 0x1b	; 27
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <gpio_set_pin_value+0x38>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <gpio_set_pin_value+0x34>
 306:	80 95       	com	r24
 308:	82 23       	and	r24, r18
 30a:	8b bb       	out	0x1b, r24	; 27
 30c:	08 95       	ret
		}
		break;
		
		case PORT_B :
		if (value ==1)
 30e:	41 30       	cpi	r20, 0x01	; 1
 310:	59 f4       	brne	.+22     	; 0x328 <gpio_set_pin_value+0x5e>
		{
			setbit(PORTB ,pin);
 312:	28 b3       	in	r18, 0x18	; 24
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <gpio_set_pin_value+0x54>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <gpio_set_pin_value+0x50>
 322:	82 2b       	or	r24, r18
 324:	88 bb       	out	0x18, r24	; 24
 326:	08 95       	ret
		}
		else
		{
			clearbit(PORTB,pin);
 328:	28 b3       	in	r18, 0x18	; 24
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <gpio_set_pin_value+0x6a>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <gpio_set_pin_value+0x66>
 338:	80 95       	com	r24
 33a:	82 23       	and	r24, r18
 33c:	88 bb       	out	0x18, r24	; 24
 33e:	08 95       	ret
		}
		break;
		
		case PORT_C :
		if (value ==1)
 340:	41 30       	cpi	r20, 0x01	; 1
 342:	59 f4       	brne	.+22     	; 0x35a <gpio_set_pin_value+0x90>
		{
			setbit(PORTC ,pin);
 344:	25 b3       	in	r18, 0x15	; 21
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <gpio_set_pin_value+0x86>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <gpio_set_pin_value+0x82>
 354:	82 2b       	or	r24, r18
 356:	85 bb       	out	0x15, r24	; 21
 358:	08 95       	ret
		}
		else
		{
			clearbit(PORTC,pin);
 35a:	25 b3       	in	r18, 0x15	; 21
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <gpio_set_pin_value+0x9c>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <gpio_set_pin_value+0x98>
 36a:	80 95       	com	r24
 36c:	82 23       	and	r24, r18
 36e:	85 bb       	out	0x15, r24	; 21
 370:	08 95       	ret
		}
		break;
		
		case PORT_D :
		if (value ==1)
 372:	41 30       	cpi	r20, 0x01	; 1
 374:	59 f4       	brne	.+22     	; 0x38c <gpio_set_pin_value+0xc2>
		{
			setbit(PORTD ,pin);
 376:	22 b3       	in	r18, 0x12	; 18
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <gpio_set_pin_value+0xb8>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <gpio_set_pin_value+0xb4>
 386:	82 2b       	or	r24, r18
 388:	82 bb       	out	0x12, r24	; 18
 38a:	08 95       	ret
		}
		else
		{
			clearbit(PORTD,pin);
 38c:	22 b3       	in	r18, 0x12	; 18
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <gpio_set_pin_value+0xce>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <gpio_set_pin_value+0xca>
 39c:	80 95       	com	r24
 39e:	82 23       	and	r24, r18
 3a0:	82 bb       	out	0x12, r24	; 18
 3a2:	08 95       	ret

000003a4 <ISR_INT0>:
	}
}

void ISR_INT0(void)
{
	gpio_set_pin_value(PORT_A ,pin0 ,1);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 65 01 	call	0x2ca	; 0x2ca <gpio_set_pin_value>
 3ae:	08 95       	ret

000003b0 <ISR_INT1>:
//	//PORTA = 0X01;
//}

void ISR_INT1(void)
{
	gpio_set_pin_value(PORT_A ,pin1 ,1);
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 65 01 	call	0x2ca	; 0x2ca <gpio_set_pin_value>
 3ba:	08 95       	ret

000003bc <ISR_INT2>:
//
//
//}
void ISR_INT2(void)
{
	gpio_set_pin_value(PORT_C ,pin0 ,1);
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 65 01 	call	0x2ca	; 0x2ca <gpio_set_pin_value>
 3c6:	08 95       	ret

000003c8 <main>:



int main(void)
{
	direction_and_port_init();
 3c8:	0e 94 09 02 	call	0x412	; 0x412 <direction_and_port_init>
	//DDRC =0XFF;
	//PORTC = 0X00;
	//DDRB =0X00;
	//PORTB=0XFF;
	//EXTI_INT0_INIT();
	EXTI_INT0_INIT_SENSE(FAILING_EDGE);
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	0e 94 3e 00 	call	0x7c	; 0x7c <EXTI_INT0_INIT_SENSE>
	EXTI_INT_ENABLE(IN0);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 a9 00 	call	0x152	; 0x152 <EXTI_INT_ENABLE>
	EXTI_U8INT0SETCALLBACK(&ISR_INT0);
 3d8:	82 ed       	ldi	r24, 0xD2	; 210
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 c0 00 	call	0x180	; 0x180 <EXTI_U8INT0SETCALLBACK>
	EXTI_INT1_INIT_SENSE(FAILING_EDGE);
 3e0:	83 e0       	ldi	r24, 0x03	; 3
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 6b 00 	call	0xd6	; 0xd6 <EXTI_INT1_INIT_SENSE>
	EXTI_INT_ENABLE(IN1);
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 a9 00 	call	0x152	; 0x152 <EXTI_INT_ENABLE>
	EXTI_U8INT1SETCALLBACK(&ISR_INT1);
 3ee:	88 ed       	ldi	r24, 0xD8	; 216
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 ca 00 	call	0x194	; 0x194 <EXTI_U8INT1SETCALLBACK>
	EXTI_INT2_INIT_SENSE(FAILING_EDGE);
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 98 00 	call	0x130	; 0x130 <EXTI_INT2_INIT_SENSE>
	EXTI_INT_ENABLE(IN2);
 3fe:	83 e0       	ldi	r24, 0x03	; 3
 400:	0e 94 a9 00 	call	0x152	; 0x152 <EXTI_INT_ENABLE>
	EXTI_U8INT2SETCALLBACK(&ISR_INT2);
 404:	8e ed       	ldi	r24, 0xDE	; 222
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <EXTI_U8INT2SETCALLBACK>
	
	//EXTI_INT1_INIT();
	//EXTI_INT2_INIT();
	GIE_ENABLE();
 40c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <GIE_ENABLE>
 410:	ff cf       	rjmp	.-2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>

00000412 <direction_and_port_init>:
#include "port_config.h"
#include "port_initial.h"

void direction_and_port_init(void)
{
	DDRA = DDRA_DIRECTION;
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	8a bb       	out	0x1a, r24	; 26
	DDRB = DDRB_DIRECTION;
 416:	17 ba       	out	0x17, r1	; 23
	DDRC = DDRC_DIRECTION;
 418:	84 bb       	out	0x14, r24	; 20
	DDRD = DDRD_DIRECTION;
 41a:	11 ba       	out	0x11, r1	; 17
	
	PORTA = PORTA_VALUE;
 41c:	1b ba       	out	0x1b, r1	; 27
	PORTB = PORTB_VALUE;
 41e:	88 bb       	out	0x18, r24	; 24
	PORTC = PORTC_VALUE;  
 420:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_VALUE;
 422:	82 bb       	out	0x12, r24	; 18
 424:	08 95       	ret

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
