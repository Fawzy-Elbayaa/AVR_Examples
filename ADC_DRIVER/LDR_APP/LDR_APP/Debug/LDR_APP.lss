
LDR_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000044a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000004be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4a  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000822  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000729  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00002384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000476  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000865  00000000  00000000  0000296a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000031cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 91 01 	call	0x322	; 0x322 <main>
  74:	0c 94 23 02 	jmp	0x446	; 0x446 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_VoidInit>:
	#if VOLTAGE_REFERNCE==INPUT_VOLTAGE_AREF
	clearbit(ADMUX,ADMUX_REFS0);
	clearbit(ADMUX,ADMUX_REFS1);
	
	#elif VOLTAGE_REFERNCE==INPUT_VOLTAGE_AVCC
	setbit(ADMUX,ADMUX_REFS0);
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	87 b9       	out	0x07, r24	; 7
	clearbit(ADMUX,ADMUX_REFS1);
  82:	87 b1       	in	r24, 0x07	; 7
  84:	8f 77       	andi	r24, 0x7F	; 127
  86:	87 b9       	out	0x07, r24	; 7
	
	//right adjust
	#if RESULT_ADC==ADC_RIGHT_ADJUST
	clearbit(ADMUX,ADMUX_ADLAR);
	#elif RESULT_ADC==ADC_LEFT_ADJUST
	setbit(ADMUX,ADMUX_ADLAR);
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	80 62       	ori	r24, 0x20	; 32
  8c:	87 b9       	out	0x07, r24	; 7
	#else
	#warning "the selection is not exist configuration it"
    #endif
	
	//prescaler
	ADCSRA &=Mask_Prescaler;
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	88 7f       	andi	r24, 0xF8	; 248
  92:	86 b9       	out	0x06, r24	; 6
	ADCSRA |=PRESCALER_divide_by_128;
  94:	86 b1       	in	r24, 0x06	; 6
  96:	87 60       	ori	r24, 0x07	; 7
  98:	86 b9       	out	0x06, r24	; 6
	
	
	//enable ADC
	setbit(ADCSRA,ADCSRA_ADEN);
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	86 b9       	out	0x06, r24	; 6
  a0:	08 95       	ret

000000a2 <ADC_U16StartConversionSync>:

   if (Current_state ==IDEAL)
   {
        Current_state =BUSY;
	    // the MUX bit in ADMUX register
	    ADMUX &=MASK_Mux_Channel;
  a2:	97 b1       	in	r25, 0x07	; 7
  a4:	90 7e       	andi	r25, 0xE0	; 224
  a6:	97 b9       	out	0x07, r25	; 7
	    ADMUX |= COPY_U8Channel;
  a8:	97 b1       	in	r25, 0x07	; 7
  aa:	89 2b       	or	r24, r25
  ac:	87 b9       	out	0x07, r24	; 7
	    
	    //start conversion
	    setbit(ADCSRA,ADCSRA_ADSC);
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	86 b9       	out	0x06, r24	; 6


U8 ADC_U16StartConversionSync(U8 COPY_U8Channel , U16* reading)
{
	U8 error_state =OK;
	U32 Local_u32Counter = 0;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	dc 01       	movw	r26, r24
	    ADMUX |= COPY_U8Channel;
	    
	    //start conversion
	    setbit(ADCSRA,ADCSRA_ADSC);
	    //polling (busy waiting) until the conversion complete flag is set
	    while((readbit(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter !=ADC_u32TIMEOUT))
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <ADC_U16StartConversionSync+0x20>
	    {
	    	Local_u32Counter++;
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	a1 1d       	adc	r26, r1
  c0:	b1 1d       	adc	r27, r1
	    ADMUX |= COPY_U8Channel;
	    
	    //start conversion
	    setbit(ADCSRA,ADCSRA_ADSC);
	    //polling (busy waiting) until the conversion complete flag is set
	    while((readbit(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter !=ADC_u32TIMEOUT))
  c2:	34 99       	sbic	0x06, 4	; 6
  c4:	06 c0       	rjmp	.+12     	; 0xd2 <ADC_U16StartConversionSync+0x30>
  c6:	80 35       	cpi	r24, 0x50	; 80
  c8:	23 ec       	ldi	r18, 0xC3	; 195
  ca:	92 07       	cpc	r25, r18
  cc:	a1 05       	cpc	r26, r1
  ce:	b1 05       	cpc	r27, r1
  d0:	a9 f7       	brne	.-22     	; 0xbc <ADC_U16StartConversionSync+0x1a>
	    {
	    	Local_u32Counter++;
	    } 
	    if (Local_u32Counter ==ADC_u32TIMEOUT)
  d2:	80 35       	cpi	r24, 0x50	; 80
  d4:	93 4c       	sbci	r25, 0xC3	; 195
  d6:	a1 05       	cpc	r26, r1
  d8:	b1 05       	cpc	r27, r1
  da:	51 f0       	breq	.+20     	; 0xf0 <ADC_U16StartConversionSync+0x4e>
	    	error_state = NOTOK;
	    }
	    else
	    {
	    	//loop is broken because the flag is reach
	    	setbit(ADCSRA,ADCSRA_ADIF);
  dc:	86 b1       	in	r24, 0x06	; 6
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	86 b9       	out	0x06, r24	; 6
			{
				*reading = RESULT;
			}
	    	else if (Reading_ADC==Reading_8bit)
	    	{
				*reading = ADCH;
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fb 01       	movw	r30, r22
  e8:	91 83       	std	Z+1, r25	; 0x01
  ea:	80 83       	st	Z, r24
}


U8 ADC_U16StartConversionSync(U8 COPY_U8Channel , U16* reading)
{
	U8 error_state =OK;
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
	    	Local_u32Counter++;
	    } 
	    if (Local_u32Counter ==ADC_u32TIMEOUT)
	    {
	    	//loop is broken because the time is reach
	    	error_state = NOTOK;
  f0:	81 e0       	ldi	r24, 0x01	; 1
		Current_state= BUSY;
		error_state = NOTOK;
	}
	return error_state ;
	
  f2:	08 95       	ret

000000f4 <enable_tick>:
		write_char(arr[i]);
	}
	position_xy(x,y);
	write_char(block_number);
	
}
  f4:	88 b3       	in	r24, 0x18	; 24
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	8f ec       	ldi	r24, 0xCF	; 207
  fc:	97 e0       	ldi	r25, 0x07	; 7
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <enable_tick+0xa>
 102:	00 c0       	rjmp	.+0      	; 0x104 <enable_tick+0x10>
 104:	00 00       	nop
 106:	88 b3       	in	r24, 0x18	; 24
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	08 95       	ret

0000010e <write_command>:
 10e:	98 b3       	in	r25, 0x18	; 24
 110:	9e 7f       	andi	r25, 0xFE	; 254
 112:	98 bb       	out	0x18, r25	; 24
 114:	98 b3       	in	r25, 0x18	; 24
 116:	9d 7f       	andi	r25, 0xFD	; 253
 118:	98 bb       	out	0x18, r25	; 24
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	0e 94 7a 00 	call	0xf4	; 0xf4 <enable_tick>
 120:	08 95       	ret

00000122 <init_lcd>:
 122:	2f eb       	ldi	r18, 0xBF	; 191
 124:	8a ed       	ldi	r24, 0xDA	; 218
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <init_lcd+0x6>
 130:	00 c0       	rjmp	.+0      	; 0x132 <init_lcd+0x10>
 132:	00 00       	nop
 134:	88 e3       	ldi	r24, 0x38	; 56
 136:	0e 94 87 00 	call	0x10e	; 0x10e <write_command>
 13a:	8f ec       	ldi	r24, 0xCF	; 207
 13c:	97 e0       	ldi	r25, 0x07	; 7
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <init_lcd+0x1c>
 142:	00 c0       	rjmp	.+0      	; 0x144 <init_lcd+0x22>
 144:	00 00       	nop
 146:	8c e0       	ldi	r24, 0x0C	; 12
 148:	0e 94 87 00 	call	0x10e	; 0x10e <write_command>
 14c:	8f ec       	ldi	r24, 0xCF	; 207
 14e:	97 e0       	ldi	r25, 0x07	; 7
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <init_lcd+0x2e>
 154:	00 c0       	rjmp	.+0      	; 0x156 <init_lcd+0x34>
 156:	00 00       	nop
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 87 00 	call	0x10e	; 0x10e <write_command>
 15e:	8f e9       	ldi	r24, 0x9F	; 159
 160:	9f e0       	ldi	r25, 0x0F	; 15
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <init_lcd+0x40>
 166:	00 c0       	rjmp	.+0      	; 0x168 <init_lcd+0x46>
 168:	00 00       	nop
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	0e 94 87 00 	call	0x10e	; 0x10e <write_command>
 170:	08 95       	ret

00000172 <write_char>:
 172:	98 b3       	in	r25, 0x18	; 24
 174:	91 60       	ori	r25, 0x01	; 1
 176:	98 bb       	out	0x18, r25	; 24
 178:	98 b3       	in	r25, 0x18	; 24
 17a:	9d 7f       	andi	r25, 0xFD	; 253
 17c:	98 bb       	out	0x18, r25	; 24
 17e:	82 bb       	out	0x12, r24	; 18
 180:	0e 94 7a 00 	call	0xf4	; 0xf4 <enable_tick>
 184:	08 95       	ret

00000186 <send_number_lcd>:
void send_number_lcd(U16 number , U8 digits)
{
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	ec 01       	movw	r28, r24
	U8 x,y,z,w,e,r,t,u;
	switch(digits)
 194:	63 30       	cpi	r22, 0x03	; 3
 196:	19 f0       	breq	.+6      	; 0x19e <send_number_lcd+0x18>
 198:	65 30       	cpi	r22, 0x05	; 5
 19a:	e1 f1       	breq	.+120    	; 0x214 <send_number_lcd+0x8e>
 19c:	bb c0       	rjmp	.+374    	; 0x314 <send_number_lcd+0x18e>
	{
		
		
	   case 3:
	    
	    x = (number/100);      x=x+48;           write_char(x); 
 19e:	7c 01       	movw	r14, r24
 1a0:	f6 94       	lsr	r15
 1a2:	e7 94       	ror	r14
 1a4:	f6 94       	lsr	r15
 1a6:	e7 94       	ror	r14
 1a8:	97 01       	movw	r18, r14
 1aa:	ab e7       	ldi	r26, 0x7B	; 123
 1ac:	b4 e1       	ldi	r27, 0x14	; 20
 1ae:	0e 94 14 02 	call	0x428	; 0x428 <__umulhisi3>
 1b2:	8c 01       	movw	r16, r24
 1b4:	16 95       	lsr	r17
 1b6:	07 95       	ror	r16
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	80 0f       	add	r24, r16
 1bc:	0e 94 b9 00 	call	0x172	; 0x172 <write_char>
	    y = (number%100)/10;   y = y+48;         write_char(y);
 1c0:	24 e6       	ldi	r18, 0x64	; 100
 1c2:	20 9f       	mul	r18, r16
 1c4:	c0 01       	movw	r24, r0
 1c6:	21 9f       	mul	r18, r17
 1c8:	90 0d       	add	r25, r0
 1ca:	11 24       	eor	r1, r1
 1cc:	c8 1b       	sub	r28, r24
 1ce:	d9 0b       	sbc	r29, r25
 1d0:	9e 01       	movw	r18, r28
 1d2:	ad ec       	ldi	r26, 0xCD	; 205
 1d4:	bc ec       	ldi	r27, 0xCC	; 204
 1d6:	0e 94 14 02 	call	0x428	; 0x428 <__umulhisi3>
 1da:	8c 01       	movw	r16, r24
 1dc:	16 95       	lsr	r17
 1de:	07 95       	ror	r16
 1e0:	16 95       	lsr	r17
 1e2:	07 95       	ror	r16
 1e4:	16 95       	lsr	r17
 1e6:	07 95       	ror	r16
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	80 0f       	add	r24, r16
 1ec:	0e 94 b9 00 	call	0x172	; 0x172 <write_char>
	    z = (number%100)%10;   z= z+48;          write_char(z);
 1f0:	c8 01       	movw	r24, r16
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	00 0f       	add	r16, r16
 1f8:	11 1f       	adc	r17, r17
 1fa:	00 0f       	add	r16, r16
 1fc:	11 1f       	adc	r17, r17
 1fe:	00 0f       	add	r16, r16
 200:	11 1f       	adc	r17, r17
 202:	08 0f       	add	r16, r24
 204:	19 1f       	adc	r17, r25
 206:	ce 01       	movw	r24, r28
 208:	80 1b       	sub	r24, r16
 20a:	91 0b       	sbc	r25, r17
 20c:	80 5d       	subi	r24, 0xD0	; 208
 20e:	0e 94 b9 00 	call	0x172	; 0x172 <write_char>
	    break;
 212:	80 c0       	rjmp	.+256    	; 0x314 <send_number_lcd+0x18e>
	    
	    case 5:
	    w = (number/10000);                  w= w+48;          write_char(w);
 214:	7c 01       	movw	r14, r24
 216:	f6 94       	lsr	r15
 218:	e7 94       	ror	r14
 21a:	f6 94       	lsr	r15
 21c:	e7 94       	ror	r14
 21e:	f6 94       	lsr	r15
 220:	e7 94       	ror	r14
 222:	f6 94       	lsr	r15
 224:	e7 94       	ror	r14
 226:	97 01       	movw	r18, r14
 228:	a7 e4       	ldi	r26, 0x47	; 71
 22a:	b3 e0       	ldi	r27, 0x03	; 3
 22c:	0e 94 14 02 	call	0x428	; 0x428 <__umulhisi3>
 230:	8c 01       	movw	r16, r24
 232:	16 95       	lsr	r17
 234:	07 95       	ror	r16
 236:	16 95       	lsr	r17
 238:	07 95       	ror	r16
 23a:	16 95       	lsr	r17
 23c:	07 95       	ror	r16
 23e:	80 e3       	ldi	r24, 0x30	; 48
 240:	80 0f       	add	r24, r16
 242:	0e 94 b9 00 	call	0x172	; 0x172 <write_char>
	    e = (number%10000)/1000;             e=e+48;           write_char(e);
 246:	20 e1       	ldi	r18, 0x10	; 16
 248:	37 e2       	ldi	r19, 0x27	; 39
 24a:	02 9f       	mul	r16, r18
 24c:	c0 01       	movw	r24, r0
 24e:	03 9f       	mul	r16, r19
 250:	90 0d       	add	r25, r0
 252:	12 9f       	mul	r17, r18
 254:	90 0d       	add	r25, r0
 256:	11 24       	eor	r1, r1
 258:	c8 1b       	sub	r28, r24
 25a:	d9 0b       	sbc	r29, r25
 25c:	7e 01       	movw	r14, r28
 25e:	f6 94       	lsr	r15
 260:	e7 94       	ror	r14
 262:	f6 94       	lsr	r15
 264:	e7 94       	ror	r14
 266:	f6 94       	lsr	r15
 268:	e7 94       	ror	r14
 26a:	97 01       	movw	r18, r14
 26c:	a5 ec       	ldi	r26, 0xC5	; 197
 26e:	b0 e2       	ldi	r27, 0x20	; 32
 270:	0e 94 14 02 	call	0x428	; 0x428 <__umulhisi3>
 274:	8c 01       	movw	r16, r24
 276:	12 95       	swap	r17
 278:	02 95       	swap	r16
 27a:	0f 70       	andi	r16, 0x0F	; 15
 27c:	01 27       	eor	r16, r17
 27e:	1f 70       	andi	r17, 0x0F	; 15
 280:	01 27       	eor	r16, r17
 282:	80 e3       	ldi	r24, 0x30	; 48
 284:	80 0f       	add	r24, r16
 286:	0e 94 b9 00 	call	0x172	; 0x172 <write_char>
	    r=  ((number%10000)%1000)/100;       r= r+48;		   write_char(r);
 28a:	28 ee       	ldi	r18, 0xE8	; 232
 28c:	33 e0       	ldi	r19, 0x03	; 3
 28e:	02 9f       	mul	r16, r18
 290:	c0 01       	movw	r24, r0
 292:	03 9f       	mul	r16, r19
 294:	90 0d       	add	r25, r0
 296:	12 9f       	mul	r17, r18
 298:	90 0d       	add	r25, r0
 29a:	11 24       	eor	r1, r1
 29c:	c8 1b       	sub	r28, r24
 29e:	d9 0b       	sbc	r29, r25
 2a0:	7e 01       	movw	r14, r28
 2a2:	f6 94       	lsr	r15
 2a4:	e7 94       	ror	r14
 2a6:	f6 94       	lsr	r15
 2a8:	e7 94       	ror	r14
 2aa:	97 01       	movw	r18, r14
 2ac:	ab e7       	ldi	r26, 0x7B	; 123
 2ae:	b4 e1       	ldi	r27, 0x14	; 20
 2b0:	0e 94 14 02 	call	0x428	; 0x428 <__umulhisi3>
 2b4:	8c 01       	movw	r16, r24
 2b6:	16 95       	lsr	r17
 2b8:	07 95       	ror	r16
 2ba:	80 e3       	ldi	r24, 0x30	; 48
 2bc:	80 0f       	add	r24, r16
 2be:	0e 94 b9 00 	call	0x172	; 0x172 <write_char>
	    t = ((number%10000)%1000)%100/10;    t= t+48;		   write_char(t);
 2c2:	24 e6       	ldi	r18, 0x64	; 100
 2c4:	20 9f       	mul	r18, r16
 2c6:	c0 01       	movw	r24, r0
 2c8:	21 9f       	mul	r18, r17
 2ca:	90 0d       	add	r25, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	c8 1b       	sub	r28, r24
 2d0:	d9 0b       	sbc	r29, r25
 2d2:	9e 01       	movw	r18, r28
 2d4:	ad ec       	ldi	r26, 0xCD	; 205
 2d6:	bc ec       	ldi	r27, 0xCC	; 204
 2d8:	0e 94 14 02 	call	0x428	; 0x428 <__umulhisi3>
 2dc:	8c 01       	movw	r16, r24
 2de:	16 95       	lsr	r17
 2e0:	07 95       	ror	r16
 2e2:	16 95       	lsr	r17
 2e4:	07 95       	ror	r16
 2e6:	16 95       	lsr	r17
 2e8:	07 95       	ror	r16
 2ea:	80 e3       	ldi	r24, 0x30	; 48
 2ec:	80 0f       	add	r24, r16
 2ee:	0e 94 b9 00 	call	0x172	; 0x172 <write_char>
	    u = ((number%10000)%1000)%100%10;    u= u+48;		   write_char(u);
 2f2:	c8 01       	movw	r24, r16
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	00 0f       	add	r16, r16
 2fa:	11 1f       	adc	r17, r17
 2fc:	00 0f       	add	r16, r16
 2fe:	11 1f       	adc	r17, r17
 300:	00 0f       	add	r16, r16
 302:	11 1f       	adc	r17, r17
 304:	08 0f       	add	r16, r24
 306:	19 1f       	adc	r17, r25
 308:	ce 01       	movw	r24, r28
 30a:	80 1b       	sub	r24, r16
 30c:	91 0b       	sbc	r25, r17
 30e:	80 5d       	subi	r24, 0xD0	; 208
 310:	0e 94 b9 00 	call	0x172	; 0x172 <write_char>
	    break;
	}
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	ef 90       	pop	r14
 320:	08 95       	ret

00000322 <main>:

U16 app_read;
U8 i;
int main(void)
{
   direction_and_port_init();
 322:	0e 94 0a 02 	call	0x414	; 0x414 <direction_and_port_init>
   
   
   init_lcd();
 326:	0e 94 91 00 	call	0x122	; 0x122 <init_lcd>
   write_command(clear_screen);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 87 00 	call	0x10e	; 0x10e <write_command>
   
   ADC_VoidInit();
 330:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_VoidInit>
    while (1) 
    {
		write_command(clear_screen);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 87 00 	call	0x10e	; 0x10e <write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	8f ec       	ldi	r24, 0xCF	; 207
 33c:	97 e0       	ldi	r25, 0x07	; 7
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <main+0x1c>
 342:	00 c0       	rjmp	.+0      	; 0x344 <main+0x22>
 344:	00 00       	nop
		_delay_ms(1);
		 ADC_U16StartConversionSync(SINGLE_ENDED_INPUT_ADC2 ,  &app_read);
 346:	60 e6       	ldi	r22, 0x60	; 96
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	0e 94 51 00 	call	0xa2	; 0xa2 <ADC_U16StartConversionSync>
		 
		if (app_read >0 && app_read <34)
 350:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 354:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 358:	9c 01       	movw	r18, r24
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	31 09       	sbc	r19, r1
 35e:	21 32       	cpi	r18, 0x21	; 33
 360:	31 05       	cpc	r19, r1
 362:	18 f4       	brcc	.+6      	; 0x36a <main+0x48>
		{
			PORTC = 0b11111111;
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	85 bb       	out	0x15, r24	; 21
 368:	44 c0       	rjmp	.+136    	; 0x3f2 <main+0xd0>
		}
		
		 
		else if ((app_read >34 && app_read <60))
 36a:	9c 01       	movw	r18, r24
 36c:	23 52       	subi	r18, 0x23	; 35
 36e:	31 09       	sbc	r19, r1
 370:	29 31       	cpi	r18, 0x19	; 25
 372:	31 05       	cpc	r19, r1
 374:	18 f4       	brcc	.+6      	; 0x37c <main+0x5a>
		{
			PORTC = 0b01111111;
 376:	8f e7       	ldi	r24, 0x7F	; 127
 378:	85 bb       	out	0x15, r24	; 21
 37a:	3b c0       	rjmp	.+118    	; 0x3f2 <main+0xd0>
		}
		else if ((app_read >60 && app_read <97))
 37c:	9c 01       	movw	r18, r24
 37e:	2d 53       	subi	r18, 0x3D	; 61
 380:	31 09       	sbc	r19, r1
 382:	24 32       	cpi	r18, 0x24	; 36
 384:	31 05       	cpc	r19, r1
 386:	18 f4       	brcc	.+6      	; 0x38e <main+0x6c>
		{
			PORTC = 0b00111111;
 388:	8f e3       	ldi	r24, 0x3F	; 63
 38a:	85 bb       	out	0x15, r24	; 21
 38c:	32 c0       	rjmp	.+100    	; 0x3f2 <main+0xd0>
		}
		else if ((app_read >97 && app_read <154))
 38e:	9c 01       	movw	r18, r24
 390:	22 56       	subi	r18, 0x62	; 98
 392:	31 09       	sbc	r19, r1
 394:	28 33       	cpi	r18, 0x38	; 56
 396:	31 05       	cpc	r19, r1
 398:	18 f4       	brcc	.+6      	; 0x3a0 <main+0x7e>
		{
			PORTC = 0b00011111;
 39a:	8f e1       	ldi	r24, 0x1F	; 31
 39c:	85 bb       	out	0x15, r24	; 21
 39e:	29 c0       	rjmp	.+82     	; 0x3f2 <main+0xd0>
		}
		else if ((app_read >154 && app_read <193))
 3a0:	9c 01       	movw	r18, r24
 3a2:	2b 59       	subi	r18, 0x9B	; 155
 3a4:	31 09       	sbc	r19, r1
 3a6:	26 32       	cpi	r18, 0x26	; 38
 3a8:	31 05       	cpc	r19, r1
 3aa:	18 f4       	brcc	.+6      	; 0x3b2 <main+0x90>
		{
			PORTC = 0b00001111;
 3ac:	8f e0       	ldi	r24, 0x0F	; 15
 3ae:	85 bb       	out	0x15, r24	; 21
 3b0:	20 c0       	rjmp	.+64     	; 0x3f2 <main+0xd0>
		}
		else if ((app_read >193 && app_read <220))
 3b2:	9c 01       	movw	r18, r24
 3b4:	22 5c       	subi	r18, 0xC2	; 194
 3b6:	31 09       	sbc	r19, r1
 3b8:	2a 31       	cpi	r18, 0x1A	; 26
 3ba:	31 05       	cpc	r19, r1
 3bc:	18 f4       	brcc	.+6      	; 0x3c4 <main+0xa2>
		{
			PORTC = 0b00000111;
 3be:	87 e0       	ldi	r24, 0x07	; 7
 3c0:	85 bb       	out	0x15, r24	; 21
 3c2:	17 c0       	rjmp	.+46     	; 0x3f2 <main+0xd0>
		}
		else if ((app_read >220 && app_read <241))
 3c4:	9c 01       	movw	r18, r24
 3c6:	2d 5d       	subi	r18, 0xDD	; 221
 3c8:	31 09       	sbc	r19, r1
 3ca:	24 31       	cpi	r18, 0x14	; 20
 3cc:	31 05       	cpc	r19, r1
 3ce:	18 f4       	brcc	.+6      	; 0x3d6 <main+0xb4>
		{
			PORTC = 0b00000011;
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	85 bb       	out	0x15, r24	; 21
 3d4:	0e c0       	rjmp	.+28     	; 0x3f2 <main+0xd0>
		}
		else if ((app_read >241 && app_read <248))
 3d6:	9c 01       	movw	r18, r24
 3d8:	22 5f       	subi	r18, 0xF2	; 242
 3da:	31 09       	sbc	r19, r1
 3dc:	26 30       	cpi	r18, 0x06	; 6
 3de:	31 05       	cpc	r19, r1
 3e0:	18 f4       	brcc	.+6      	; 0x3e8 <main+0xc6>
		{
			PORTC = 0b00000001;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	85 bb       	out	0x15, r24	; 21
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <main+0xd0>
		}
		else if ((app_read >248 && app_read <255))
 3e8:	89 5f       	subi	r24, 0xF9	; 249
 3ea:	91 09       	sbc	r25, r1
 3ec:	06 97       	sbiw	r24, 0x06	; 6
 3ee:	08 f4       	brcc	.+2      	; 0x3f2 <main+0xd0>
		{
			PORTC = 0b00000000;
 3f0:	15 ba       	out	0x15, r1	; 21
		}
		
		
		send_number_lcd(app_read , 5);
 3f2:	65 e0       	ldi	r22, 0x05	; 5
 3f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3f8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3fc:	0e 94 c3 00 	call	0x186	; 0x186 <send_number_lcd>
 400:	9f ef       	ldi	r25, 0xFF	; 255
 402:	24 e3       	ldi	r18, 0x34	; 52
 404:	8c e0       	ldi	r24, 0x0C	; 12
 406:	91 50       	subi	r25, 0x01	; 1
 408:	20 40       	sbci	r18, 0x00	; 0
 40a:	80 40       	sbci	r24, 0x00	; 0
 40c:	e1 f7       	brne	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
 412:	90 cf       	rjmp	.-224    	; 0x334 <main+0x12>

00000414 <direction_and_port_init>:
#include "port_config.h"
#include "port_initial.h"

void direction_and_port_init(void)
{
	DDRA = DDRA_DIRECTION;
 414:	1a ba       	out	0x1a, r1	; 26
	DDRB = DDRB_DIRECTION;
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	87 bb       	out	0x17, r24	; 23
	DDRC = DDRC_DIRECTION;
 41a:	84 bb       	out	0x14, r24	; 20
	DDRD = DDRD_DIRECTION;
 41c:	81 bb       	out	0x11, r24	; 17
	
	PORTA = PORTA_VALUE;
 41e:	1b ba       	out	0x1b, r1	; 27
	PORTB = PORTB_VALUE;
 420:	18 ba       	out	0x18, r1	; 24
	PORTC = PORTC_VALUE;  
 422:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_VALUE;
 424:	12 ba       	out	0x12, r1	; 18
 426:	08 95       	ret

00000428 <__umulhisi3>:
 428:	a2 9f       	mul	r26, r18
 42a:	b0 01       	movw	r22, r0
 42c:	b3 9f       	mul	r27, r19
 42e:	c0 01       	movw	r24, r0
 430:	a3 9f       	mul	r26, r19
 432:	70 0d       	add	r23, r0
 434:	81 1d       	adc	r24, r1
 436:	11 24       	eor	r1, r1
 438:	91 1d       	adc	r25, r1
 43a:	b2 9f       	mul	r27, r18
 43c:	70 0d       	add	r23, r0
 43e:	81 1d       	adc	r24, r1
 440:	11 24       	eor	r1, r1
 442:	91 1d       	adc	r25, r1
 444:	08 95       	ret

00000446 <_exit>:
 446:	f8 94       	cli

00000448 <__stop_program>:
 448:	ff cf       	rjmp	.-2      	; 0x448 <__stop_program>
