
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800060  00800060  00000340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000890  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000655  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042e  00000000  00000000  00001341  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000439  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029b  00000000  00000000  00001d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_10>
  2c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 36       	cpi	r26, 0x6D	; 109
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  74:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GIE_ENABLE>:
#include "GIE_INTERFACE.h"


void GIE_ENABLE(void)
{
	setbit(SREG,SREG_I);
  7c:	8f b7       	in	r24, 0x3f	; 63
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8f bf       	out	0x3f, r24	; 63
  82:	08 95       	ret

00000084 <led_toggle>:
}
void led_toggle(void)
{
	
	
		toggelbit(PORTA ,0);
  84:	9b b3       	in	r25, 0x1b	; 27
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	89 27       	eor	r24, r25
  8a:	8b bb       	out	0x1b, r24	; 27
  8c:	08 95       	ret

0000008e <main>:

void led_toggle(void);

int main(void)
{
	GIE_ENABLE();
  8e:	0e 94 3e 00 	call	0x7c	; 0x7c <GIE_ENABLE>
	direction_and_port_init();
  92:	0e 94 55 00 	call	0xaa	; 0xaa <direction_and_port_init>
	TIMER0_CTC_INIT(250 , 1000);
  96:	68 ee       	ldi	r22, 0xE8	; 232
  98:	73 e0       	ldi	r23, 0x03	; 3
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	0e 94 60 00 	call	0xc0	; 0xc0 <TIMER0_CTC_INIT>
	TIMER0_U8SetCallBack(&led_toggle);
  a0:	82 e4       	ldi	r24, 0x42	; 66
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 85 00 	call	0x10a	; 0x10a <TIMER0_U8SetCallBack>
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <main+0x1a>

000000aa <direction_and_port_init>:
#include "port_config.h"
#include "port_initial.h"

void direction_and_port_init(void)
{
	DDRA = DDRA_DIRECTION;
  aa:	81 ef       	ldi	r24, 0xF1	; 241
  ac:	8a bb       	out	0x1a, r24	; 26
	DDRB = DDRB_DIRECTION;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
	DDRC = DDRC_DIRECTION;
  b2:	84 bb       	out	0x14, r24	; 20
	DDRD = DDRD_DIRECTION;
  b4:	81 bb       	out	0x11, r24	; 17
	
	PORTA = PORTA_VALUE;
  b6:	1b ba       	out	0x1b, r1	; 27
	PORTB = PORTB_VALUE;
  b8:	18 ba       	out	0x18, r1	; 24
	PORTC = PORTC_VALUE;  
  ba:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_VALUE;
  bc:	12 ba       	out	0x12, r1	; 18
  be:	08 95       	ret

000000c0 <TIMER0_CTC_INIT>:
	
	
	
}	
U8 TIMER0_CTC_INIT(U8 Max_CTC , U16 Copy_milli_second)
{
  c0:	48 2f       	mov	r20, r24
  c2:	9b 01       	movw	r18, r22
	//compare match
	//select CTC
	
	clearbit(TCCRO,TCCRO_WGM00);
  c4:	83 b7       	in	r24, 0x33	; 51
  c6:	8f 7b       	andi	r24, 0xBF	; 191
  c8:	83 bf       	out	0x33, r24	; 51
	setbit(TCCRO,TCCRO_WGM01);
  ca:	83 b7       	in	r24, 0x33	; 51
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	83 bf       	out	0x33, r24	; 51
	
	//timer prescaler
	clearbit(TCCRO,TCCRO_CS00);
  d0:	83 b7       	in	r24, 0x33	; 51
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	83 bf       	out	0x33, r24	; 51
	setbit(TCCRO , TCCRO_CS01);
  d6:	83 b7       	in	r24, 0x33	; 51
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	83 bf       	out	0x33, r24	; 51
	clearbit(TCCRO,TCCRO_CSO2);
  dc:	83 b7       	in	r24, 0x33	; 51
  de:	8b 7f       	andi	r24, 0xFB	; 251
  e0:	83 bf       	out	0x33, r24	; 51
	
	//set compare match interrupt
	setbit(TIMSK,TIMSK_OCIE0);
  e2:	89 b7       	in	r24, 0x39	; 57
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	89 bf       	out	0x39, r24	; 57
	
	OCR0 = Max_CTC;
  e8:	4c bf       	out	0x3c, r20	; 60
	CTC_ov = (U16)(((U32)Copy_milli_second *1000)/Max_CTC);
  ea:	a8 ee       	ldi	r26, 0xE8	; 232
  ec:	b3 e0       	ldi	r27, 0x03	; 3
  ee:	0e 94 55 01 	call	0x2aa	; 0x2aa <__umulhisi3>
  f2:	24 2f       	mov	r18, r20
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	0e 94 33 01 	call	0x266	; 0x266 <__udivmodsi4>
  fe:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <CTC_ov+0x1>
 102:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <CTC_ov>
	return OK;
	
	
	
}
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret

0000010a <TIMER0_U8SetCallBack>:


U8 TIMER0_U8SetCallBack(void (*Copy_PvCallBackFun)(void))
{
	U8 Local_U8ErrorStatus=OK;
	if (Copy_PvCallBackFun !=NULL)
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	31 f0       	breq	.+12     	; 0x11a <TIMER0_U8SetCallBack+0x10>
	{
		TIMER0_PVCallBackFunc = Copy_PvCallBackFun;
 10e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <TIMER0_PVCallBackFunc+0x1>
 112:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <TIMER0_PVCallBackFunc>
}


U8 TIMER0_U8SetCallBack(void (*Copy_PvCallBackFun)(void))
{
	U8 Local_U8ErrorStatus=OK;
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	08 95       	ret
		TIMER0_PVCallBackFunc = Copy_PvCallBackFun;
		
	}
	else
	{
		Local_U8ErrorStatus = NULLPOINTER;
 11a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	
	return Local_U8ErrorStatus;
}
 11c:	08 95       	ret

0000011e <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	static U16 count =0;
	count++;
 140:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <count.1606>
 144:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <count.1606+0x1>
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <count.1606+0x1>
 14e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <count.1606>
	if(count>=CTC_ov)
 152:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <CTC_ov>
 156:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <CTC_ov+0x1>
 15a:	82 17       	cp	r24, r18
 15c:	93 07       	cpc	r25, r19
 15e:	58 f0       	brcs	.+22     	; 0x176 <__vector_10+0x58>
	{
		if (TIMER0_PVCallBackFunc!=NULL)
 160:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <TIMER0_PVCallBackFunc>
 164:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <TIMER0_PVCallBackFunc+0x1>
 168:	30 97       	sbiw	r30, 0x00	; 0
 16a:	29 f0       	breq	.+10     	; 0x176 <__vector_10+0x58>
		{
			count=0;
 16c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <count.1606+0x1>
 170:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <count.1606>
			TIMER0_PVCallBackFunc();
 174:	09 95       	icall
			
		}
		
	}
	
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <__vector_11>:

void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	4f 93       	push	r20
 1a8:	5f 93       	push	r21
 1aa:	6f 93       	push	r22
 1ac:	7f 93       	push	r23
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
	static U16 counter=0;
	static U8 flag=0;
	counter++;
 1ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter.1612>
 1be:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <counter.1612+0x1>
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <counter.1612+0x1>
 1c8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counter.1612>
	//real = 3906
	//frac= 64
	
	if (fraction ==0)
 1cc:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <fraction>
 1d0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <fraction+0x1>
 1d4:	21 15       	cp	r18, r1
 1d6:	31 05       	cpc	r19, r1
 1d8:	99 f4       	brne	.+38     	; 0x200 <__vector_11+0x68>
	{
		if (counter ==real_vlue)  //3906
 1da:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <real_vlue>
 1de:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <real_vlue+0x1>
 1e2:	82 17       	cp	r24, r18
 1e4:	93 07       	cpc	r25, r19
 1e6:	71 f5       	brne	.+92     	; 0x244 <__vector_11+0xac>
		{
			if (TIMER0_PVCallBackFunc!=NULL)
 1e8:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <TIMER0_PVCallBackFunc>
 1ec:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <TIMER0_PVCallBackFunc+0x1>
 1f0:	30 97       	sbiw	r30, 0x00	; 0
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <__vector_11+0x5e>
			{
				
				TIMER0_PVCallBackFunc();
 1f4:	09 95       	icall
				
			}
			counter = 0;
 1f6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter.1612+0x1>
 1fa:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter.1612>
 1fe:	22 c0       	rjmp	.+68     	; 0x244 <__vector_11+0xac>
		}
		
	}
	else
	{
		if (counter>=real_vlue && flag==0)
 200:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <real_vlue>
 204:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <real_vlue+0x1>
 208:	84 17       	cp	r24, r20
 20a:	95 07       	cpc	r25, r21
 20c:	50 f0       	brcs	.+20     	; 0x222 <__vector_11+0x8a>
 20e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 212:	81 11       	cpse	r24, r1
 214:	06 c0       	rjmp	.+12     	; 0x222 <__vector_11+0x8a>
		{
			flag=1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			TCNT0 = (256 - fraction);   //preload
 21c:	21 95       	neg	r18
 21e:	22 bf       	out	0x32, r18	; 50
 220:	11 c0       	rjmp	.+34     	; 0x244 <__vector_11+0xac>
			
			
			
		}
		else if (flag==1)
 222:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	69 f4       	brne	.+26     	; 0x244 <__vector_11+0xac>
		{
			
			counter =0;
 22a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter.1612+0x1>
 22e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter.1612>
			flag =0;
 232:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			if (TIMER0_PVCallBackFunc!=NULL)
 236:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <TIMER0_PVCallBackFunc>
 23a:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <TIMER0_PVCallBackFunc+0x1>
 23e:	30 97       	sbiw	r30, 0x00	; 0
 240:	09 f0       	breq	.+2      	; 0x244 <__vector_11+0xac>
			{
				
				TIMER0_PVCallBackFunc();
 242:	09 95       	icall
	}
	
	
	
	
}
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	7f 91       	pop	r23
 252:	6f 91       	pop	r22
 254:	5f 91       	pop	r21
 256:	4f 91       	pop	r20
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <__udivmodsi4>:
 266:	a1 e2       	ldi	r26, 0x21	; 33
 268:	1a 2e       	mov	r1, r26
 26a:	aa 1b       	sub	r26, r26
 26c:	bb 1b       	sub	r27, r27
 26e:	fd 01       	movw	r30, r26
 270:	0d c0       	rjmp	.+26     	; 0x28c <__udivmodsi4_ep>

00000272 <__udivmodsi4_loop>:
 272:	aa 1f       	adc	r26, r26
 274:	bb 1f       	adc	r27, r27
 276:	ee 1f       	adc	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	a2 17       	cp	r26, r18
 27c:	b3 07       	cpc	r27, r19
 27e:	e4 07       	cpc	r30, r20
 280:	f5 07       	cpc	r31, r21
 282:	20 f0       	brcs	.+8      	; 0x28c <__udivmodsi4_ep>
 284:	a2 1b       	sub	r26, r18
 286:	b3 0b       	sbc	r27, r19
 288:	e4 0b       	sbc	r30, r20
 28a:	f5 0b       	sbc	r31, r21

0000028c <__udivmodsi4_ep>:
 28c:	66 1f       	adc	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	88 1f       	adc	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	1a 94       	dec	r1
 296:	69 f7       	brne	.-38     	; 0x272 <__udivmodsi4_loop>
 298:	60 95       	com	r22
 29a:	70 95       	com	r23
 29c:	80 95       	com	r24
 29e:	90 95       	com	r25
 2a0:	9b 01       	movw	r18, r22
 2a2:	ac 01       	movw	r20, r24
 2a4:	bd 01       	movw	r22, r26
 2a6:	cf 01       	movw	r24, r30
 2a8:	08 95       	ret

000002aa <__umulhisi3>:
 2aa:	a2 9f       	mul	r26, r18
 2ac:	b0 01       	movw	r22, r0
 2ae:	b3 9f       	mul	r27, r19
 2b0:	c0 01       	movw	r24, r0
 2b2:	a3 9f       	mul	r26, r19
 2b4:	70 0d       	add	r23, r0
 2b6:	81 1d       	adc	r24, r1
 2b8:	11 24       	eor	r1, r1
 2ba:	91 1d       	adc	r25, r1
 2bc:	b2 9f       	mul	r27, r18
 2be:	70 0d       	add	r23, r0
 2c0:	81 1d       	adc	r24, r1
 2c2:	11 24       	eor	r1, r1
 2c4:	91 1d       	adc	r25, r1
 2c6:	08 95       	ret

000002c8 <_exit>:
 2c8:	f8 94       	cli

000002ca <__stop_program>:
 2ca:	ff cf       	rjmp	.-2      	; 0x2ca <__stop_program>
