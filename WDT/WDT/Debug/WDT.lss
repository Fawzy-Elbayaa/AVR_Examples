
WDT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000226  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b0  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000708  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059b  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000445  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000477  00000000  00000000  00001f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  54:	e8 00       	.word	0x00e8	; ????
  56:	eb 00       	.word	0x00eb	; ????
  58:	ef 00       	.word	0x00ef	; ????
  5a:	f3 00       	.word	0x00f3	; ????
  5c:	f7 00       	.word	0x00f7	; ????
  5e:	fb 00       	.word	0x00fb	; ????
  60:	ff 00       	.word	0x00ff	; ????
  62:	03 01       	movw	r0, r6

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61
  70:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  74:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <gpio_set_pin_value>:
	}
}

void gpio_set_pin_value(unsigned char portnumber ,unsigned char pin ,unsigned char value)
{
	switch(portnumber)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	01 f1       	breq	.+64     	; 0xc0 <gpio_set_pin_value+0x44>
  80:	30 f0       	brcs	.+12     	; 0x8e <gpio_set_pin_value+0x12>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	b1 f1       	breq	.+108    	; 0xf2 <gpio_set_pin_value+0x76>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	09 f4       	brne	.+2      	; 0x8c <gpio_set_pin_value+0x10>
  8a:	4c c0       	rjmp	.+152    	; 0x124 <gpio_set_pin_value+0xa8>
  8c:	08 95       	ret
	{
		case PORT_A :
		if (value ==1)
  8e:	41 30       	cpi	r20, 0x01	; 1
  90:	59 f4       	brne	.+22     	; 0xa8 <gpio_set_pin_value+0x2c>
		{
			setbit(PORTA ,pin);
  92:	2b b3       	in	r18, 0x1b	; 27
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <gpio_set_pin_value+0x22>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <gpio_set_pin_value+0x1e>
  a2:	82 2b       	or	r24, r18
  a4:	8b bb       	out	0x1b, r24	; 27
  a6:	08 95       	ret
		}
		else
		{
			clearbit(PORTA,pin);
  a8:	2b b3       	in	r18, 0x1b	; 27
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <gpio_set_pin_value+0x38>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <gpio_set_pin_value+0x34>
  b8:	80 95       	com	r24
  ba:	82 23       	and	r24, r18
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	08 95       	ret
		}
		break;
		
		case PORT_B :
		if (value ==1)
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	59 f4       	brne	.+22     	; 0xda <gpio_set_pin_value+0x5e>
		{
			setbit(PORTB ,pin);
  c4:	28 b3       	in	r18, 0x18	; 24
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <gpio_set_pin_value+0x54>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <gpio_set_pin_value+0x50>
  d4:	82 2b       	or	r24, r18
  d6:	88 bb       	out	0x18, r24	; 24
  d8:	08 95       	ret
		}
		else
		{
			clearbit(PORTB,pin);
  da:	28 b3       	in	r18, 0x18	; 24
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <gpio_set_pin_value+0x6a>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <gpio_set_pin_value+0x66>
  ea:	80 95       	com	r24
  ec:	82 23       	and	r24, r18
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	08 95       	ret
		}
		break;
		
		case PORT_C :
		if (value ==1)
  f2:	41 30       	cpi	r20, 0x01	; 1
  f4:	59 f4       	brne	.+22     	; 0x10c <gpio_set_pin_value+0x90>
		{
			setbit(PORTC ,pin);
  f6:	25 b3       	in	r18, 0x15	; 21
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <gpio_set_pin_value+0x86>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <gpio_set_pin_value+0x82>
 106:	82 2b       	or	r24, r18
 108:	85 bb       	out	0x15, r24	; 21
 10a:	08 95       	ret
		}
		else
		{
			clearbit(PORTC,pin);
 10c:	25 b3       	in	r18, 0x15	; 21
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <gpio_set_pin_value+0x9c>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <gpio_set_pin_value+0x98>
 11c:	80 95       	com	r24
 11e:	82 23       	and	r24, r18
 120:	85 bb       	out	0x15, r24	; 21
 122:	08 95       	ret
		}
		break;
		
		case PORT_D :
		if (value ==1)
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	59 f4       	brne	.+22     	; 0x13e <gpio_set_pin_value+0xc2>
		{
			setbit(PORTD ,pin);
 128:	22 b3       	in	r18, 0x12	; 18
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <gpio_set_pin_value+0xb8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <gpio_set_pin_value+0xb4>
 138:	82 2b       	or	r24, r18
 13a:	82 bb       	out	0x12, r24	; 18
 13c:	08 95       	ret
		}
		else
		{
			clearbit(PORTD,pin);
 13e:	22 b3       	in	r18, 0x12	; 18
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <gpio_set_pin_value+0xce>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <gpio_set_pin_value+0xca>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	82 bb       	out	0x12, r24	; 18
 154:	08 95       	ret

00000156 <main>:



int main(void)
{
	direction_and_port_init();
 156:	0e 94 cf 00 	call	0x19e	; 0x19e <direction_and_port_init>
	
	gpio_set_pin_value(PORT_A , 0 , 1);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 3e 00 	call	0x7c	; 0x7c <gpio_set_pin_value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	80 e7       	ldi	r24, 0x70	; 112
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x14>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x1e>
 174:	00 00       	nop
	_delay_ms(100);
	
	gpio_set_pin_value(PORT_A , 0 , 0);
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 3e 00 	call	0x7c	; 0x7c <gpio_set_pin_value>
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	80 e7       	ldi	r24, 0x70	; 112
 184:	92 e0       	ldi	r25, 0x02	; 2
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x30>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x3a>
 190:	00 00       	nop
	_delay_ms(100);
	
	WDT_VoidEnable();
 192:	0e 94 07 01 	call	0x20e	; 0x20e <WDT_VoidEnable>
	WDT_voidSleep(WDT_RESSET_AFTER1000ms);
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	0e 94 da 00 	call	0x1b4	; 0x1b4 <WDT_voidSleep>
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0x46>

0000019e <direction_and_port_init>:
#include "port_config.h"
#include "port_initial.h"

void direction_and_port_init(void)
{
	DDRA = DDRA_DIRECTION;
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	8a bb       	out	0x1a, r24	; 26
	DDRB = DDRB_DIRECTION;
 1a2:	87 bb       	out	0x17, r24	; 23
	DDRC = DDRC_DIRECTION;
 1a4:	84 bb       	out	0x14, r24	; 20
	DDRD = DDRD_DIRECTION;
 1a6:	8f eb       	ldi	r24, 0xBF	; 191
 1a8:	81 bb       	out	0x11, r24	; 17
	
	PORTA = PORTA_VALUE;
 1aa:	1b ba       	out	0x1b, r1	; 27
	PORTB = PORTB_VALUE;
 1ac:	18 ba       	out	0x18, r1	; 24
	PORTC = PORTC_VALUE;  
 1ae:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_VALUE;
 1b0:	12 ba       	out	0x12, r1	; 18
 1b2:	08 95       	ret

000001b4 <WDT_voidSleep>:
#include "WDT_REGISTER.h"



void WDT_voidSleep(U8 copy_SleepTime)
{
 1b4:	e8 2f       	mov	r30, r24
	U8 Local_u8Error = OK;
	WDTCR &= 0b11111000;
 1b6:	81 b5       	in	r24, 0x21	; 33
 1b8:	88 7f       	andi	r24, 0xF8	; 248
 1ba:	81 bd       	out	0x21, r24	; 33
	switch (copy_SleepTime)
 1bc:	8e 2f       	mov	r24, r30
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	91 05       	cpc	r25, r1
 1c4:	18 f5       	brcc	.+70     	; 0x20c <WDT_voidSleep+0x58>
 1c6:	fc 01       	movw	r30, r24
 1c8:	e6 5d       	subi	r30, 0xD6	; 214
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	0c 94 0b 01 	jmp	0x216	; 0x216 <__tablejump2__>
	{
		
	
	case WDT_RESSET_AFTER13ms :  WDTCR |=WDT_RESSET_AFTER13ms;    break ;
 1d0:	81 b5       	in	r24, 0x21	; 33
 1d2:	81 bd       	out	0x21, r24	; 33
 1d4:	08 95       	ret
	case WDT_RESSET_AFTER32ms :  WDTCR |=WDT_RESSET_AFTER32ms;    break ;
 1d6:	81 b5       	in	r24, 0x21	; 33
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	81 bd       	out	0x21, r24	; 33
 1dc:	08 95       	ret
	case WDT_RESSET_AFTER65ms :  WDTCR |=WDT_RESSET_AFTER65ms;    break ;
 1de:	81 b5       	in	r24, 0x21	; 33
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	81 bd       	out	0x21, r24	; 33
 1e4:	08 95       	ret
	case WDT_RESSET_AFTER130ms :  WDTCR |=WDT_RESSET_AFTER130ms;    break ;
 1e6:	81 b5       	in	r24, 0x21	; 33
 1e8:	83 60       	ori	r24, 0x03	; 3
 1ea:	81 bd       	out	0x21, r24	; 33
 1ec:	08 95       	ret
	case WDT_RESSET_AFTER260ms :  WDTCR |=WDT_RESSET_AFTER260ms;    break ;
 1ee:	81 b5       	in	r24, 0x21	; 33
 1f0:	84 60       	ori	r24, 0x04	; 4
 1f2:	81 bd       	out	0x21, r24	; 33
 1f4:	08 95       	ret
	case WDT_RESSET_AFTER520ms :  WDTCR |=WDT_RESSET_AFTER520ms;    break ;
 1f6:	81 b5       	in	r24, 0x21	; 33
 1f8:	85 60       	ori	r24, 0x05	; 5
 1fa:	81 bd       	out	0x21, r24	; 33
 1fc:	08 95       	ret
	case WDT_RESSET_AFTER1000ms :  WDTCR |=WDT_RESSET_AFTER1000ms;    break ;
 1fe:	81 b5       	in	r24, 0x21	; 33
 200:	86 60       	ori	r24, 0x06	; 6
 202:	81 bd       	out	0x21, r24	; 33
 204:	08 95       	ret
	case WDT_RESSET_AFTER2100ms :  WDTCR |=WDT_RESSET_AFTER2100ms;    break ;
 206:	81 b5       	in	r24, 0x21	; 33
 208:	87 60       	ori	r24, 0x07	; 7
 20a:	81 bd       	out	0x21, r24	; 33
 20c:	08 95       	ret

0000020e <WDT_VoidEnable>:
	
	
}
void WDT_VoidEnable(void)
{
	setbit(WDTCR , WDTCR_WDE);
 20e:	81 b5       	in	r24, 0x21	; 33
 210:	88 60       	ori	r24, 0x08	; 8
 212:	81 bd       	out	0x21, r24	; 33
 214:	08 95       	ret

00000216 <__tablejump2__>:
 216:	ee 0f       	add	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	05 90       	lpm	r0, Z+
 21c:	f4 91       	lpm	r31, Z
 21e:	e0 2d       	mov	r30, r0
 220:	09 94       	ijmp

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
